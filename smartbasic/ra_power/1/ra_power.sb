// Run VSP bridge on Ra receiver.
//
// In addition to the built-in VSP code, this application manages powering
// the UART up and down, depending on the BLE link state. Leaving the UART
// running causes more than one milliamp of exra current, even in a low
// power disconnected mode!
//
// Indicate BLE connection status via SIO_15 ("EXTRA1")

// Ensure a version string is embedded in the translated script binary
DIM version$ : version$ = "$VERSION$1$"

DIM rc, hndl, scRpt$, addr$, adRpt$, devName$
DIM baudrate, txbuf_len, rxbuf_len AS INTEGER
DIM adv_interval, adv_timeout AS INTEGER
DIM nMinConnInterval, nMaxConnInterval, nSupervisionTimeout, nSlaveLatency AS INTEGER
DIM hostRxBuf$
DIM hostCommandSetName$ : hostCommandSetName$ = "#81,1,"
DIM payload$


//=============================================================================
// (Built-in) Handler for BLE and UART RX/TX events
//=============================================================================
FUNCTION HandlerBridge() AS INTEGER
    BleVspUartBridge()
ENDFUNC 1


//=============================================================================
// Actions for link up/down
//=============================================================================
SUB OnLinkUp()
    DIM rc AS INTEGER

    // Tell MCU
    GpioWrite(15, 1)

    // We need the UART
    rc = UARTOPEN(baudrate, 0, 0, "CN81H")

    // Reroute all bridge related events to built-in handler
	ONEVENT EVVSPRX         CALL HandlerBridge
	ONEVENT EVUARTRX        CALL HandlerBridge
	ONEVENT EVVSPTXEMPTY    CALL HandlerBridge
	ONEVENT EVUARTTXEMPTY   CALL HandlerBridge
ENDSUB

SUB OnLinkDown()
    DIM rc AS INTEGER

    // Tell MCU
    GpioWrite(15, 0)

    // Disable all bridge related event handlers
    ONEVENT EVVSPRX       	DISABLE
    ONEVENT EVUARTRX        DISABLE
    ONEVENT EVVSPTXEMPTY    DISABLE
    ONEVENT EVUARTTXEMPTY   DISABLE

    UARTCLOSE()

    // We must restart advertising here
    rc = BleAdvertStart(0, addr$, adv_interval, adv_timeout, 0)
ENDSUB


//=============================================================================
// BLE event handler
//=============================================================================
FUNCTION HandlerBleMsg(BYVAL nMsgId, BYVAL nCtx)
    SELECT nMsgId
	    CASE 0
		    OnLinkUp()
		CASE 1
		    OnLinkDown()
		CASE ELSE
			// Ignore all other messages
	ENDSELECT
ENDFUNC 1


//=============================================================================
// Prepare command string to host
//=============================================================================
FUNCTION MakeCommandString(BYVAL command$) AS STRING
    DIM s$, payload$ : payload$ = "81," + command$ + ","

    // Append checksum
    DIM checksum AS INTEGER : checksum = FMOD(STRSUM(payload$, 0, STRLEN(payload$), 0), 100)
    SPRINT #s$, "#";payload$;checksum;"\r"
ENDFUNC s$


//=============================================================================
// Launch VSP bridge
//=============================================================================
SUB LaunchVSP()
    // Capture BLE events to track link status.
    ONEVENT EVBLEMSG		CALL HandlerBleMsg

    // Configure and startup the service and advertisement
    #define BLE_APPEARANCE_GENERIC_TAG 512
    rc = BleGapSvcInit(devName$, 0, BLE_APPEARANCE_GENERIC_TAG, nMinConnInterval, nMaxConnInterval, nSupervisionTimeout, nSlaveLatency)
    SPRINT #payload$, "2,";rc
    PRINT MakeCommandString(payload$)
    rc = BleVspOpen(rxbuf_len, txbuf_len, 0, hndl)
    SPRINT #payload$, "3,";rc
    PRINT MakeCommandString(payload$)
    rc = BleScanRptInit(scRpt$)
    SPRINT #payload$, "4,1,";rc
    PRINT MakeCommandString(payload$)
    rc = BleAdvRptInit(adRpt$, 6, 1, STRLEN(devName$))
    SPRINT #payload$, "4,2,";rc
    PRINT MakeCommandString(payload$)
    rc = BleAdvRptAddUuid128(scRpt$, hndl)
    SPRINT #payload$, "4,3,";rc
    PRINT MakeCommandString(payload$)
    rc = BleAdvRptsCommit(adRpt$, scRpt$)
    SPRINT #payload$, "4,4,";rc
    PRINT MakeCommandString(payload$)
    rc = BleAdvertStart(0, addr$, adv_interval, adv_timeout, 0)
    SPRINT #payload$, "4,5,";rc
    PRINT MakeCommandString(payload$)

    // Power down the UART (after all characters have been sent)
    WHILE UARTInfo(5) > 0
    ENDWHILE
    UARTCLOSE()
ENDSUB


//=============================================================================
// UART RX handler
//=============================================================================
FUNCTION HandlerUartRx() AS INTEGER
    DIM rc AS INTEGER
    DIM commandCode$
    DIM separator$ : separator$ = ","

    rc = UARTREADMATCH(hostRxBuf$, 13)
    IF rc != 0 THEN
        // See if we find the expected command at the beginning of the line
        commandCode$ = STRSPLITLEFT$(hostRxBuf$, STRLEN(hostCommandSetName$))
        IF STRCMP(commandCode$, hostCommandSetName$) == 0 THEN
            // Is there a non-zero string before the next comma?
            // If so, we have the device name and can start
            devName$ = LEFT$(hostRxBuf$, STRPOS(hostRxBuf$, separator$, 0))
            IF STRLEN(devName$) > 0 THEN
                // We don't handle further UART RX events
                ONEVENT EVUARTRX DISABLE
                // Activate the bridge
                LaunchVSP()
            ENDIF
        ENDIF

        hostRxBuf$ = ""
    ENDIF
ENDFUNC 1


//=============================================================================
// main
//=============================================================================

// Print out some debug info when starting up. Use the same format that Ra uses
// to communicate with the host!
PRINT "###\r"

addr$ = ""
rxbuf_len = 512
txbuf_len = 512

rc = NVCFGKEYGET(105, nMinConnInterval)
SPRINT #payload$, "1,1,";rc;",";nMinConnInterval
PRINT MakeCommandString(payload$)
rc = NVCFGKEYGET(106, nMaxConnInterval)
SPRINT #payload$, "1,2,";rc;",";nMaxConnInterval
PRINT MakeCommandString(payload$)
rc = NVCFGKEYGET(107, nSupervisionTimeout)
SPRINT #payload$, "1,3,";rc;",";nSupervisionTimeout
PRINT MakeCommandString(payload$)
rc = NVCFGKEYGET(108, nSlaveLatency)
SPRINT #payload$, "1,4,";rc;",";nSlaveLatency
PRINT MakeCommandString(payload$)
rc = NVCFGKEYGET(113, adv_interval)
SPRINT #payload$, "1,5,";rc;",";adv_interval
PRINT MakeCommandString(payload$)
rc = NVCFGKEYGET(114, adv_timeout)
SPRINT #payload$, "1,6,";rc;",";adv_timeout
PRINT MakeCommandString(payload$)
rc = NVCFGKEYGET(115, baudrate)
SPRINT #payload$, "1,7,";rc;",";baudrate
PRINT MakeCommandString(payload$)

// Have seen illegal values for nMinConnInterval on many devices!
IF nMinConnInterval < 8 THEN
    nMinConnInterval = 8
ENDIF

// The following timing values are stored as milliseconds in NV memory,
// but the arguments to BleGapSvcInit must be in microseconds.
nMinConnInterval = nMinConnInterval * 1000
nMaxConnInterval = nMaxConnInterval * 1000
nSupervisionTimeout = nSupervisionTimeout * 1000
nSlaveLatency = nSlaveLatency * 1000

// SIO_15 (EXTRA1) indicates connection status. Set as output low.
rc = GPIOSETFUNC(15, 2, 0)
// SIO_17 (EXTRA2) is input with weak pull-up. (Not used in this script)
rc = GPIOSETFUNC(17, 1, 2)

// WORKAROUND
// There seems to be no way to read the VSP advertising name (set by AT+CFGEX 117)
// here in the smartBASIC script. Therefore, we wait until the host CPU sends a
// message with the VSP name before we launch the VSP bridge.
hostRxBuf$ = ""
rc = UARTOPEN(baudrate, 0, 0, "CN81H")
ONEVENT EVUARTRX CALL HandlerUartRx

// Enter the event handler loop.
// (This SmartBASIC application keeps on running!)
WAITEVENT
